generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String     @unique
  password   String
  activated  Boolean    @default(false)
  avatar     String     @default("Nenhum Definido")
  role       Role       @default(USER)
  activities Activity[]
  createdAt  DateTime   @default(now())
}

model Activity {
  id              Int              @id @default(autoincrement())
  userId          Int
  creator         User             @relation(fields: [userId], references: [id])
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  code            String @unique
  redirectUrl     String
  groups          Group[]
  logs           Log[]
  blockedUsers    Student[]
  activityDomains ActivityDomain[]
  createdAt       DateTime         @default(now())
}

model Log {
  id         Int      @id @default(autoincrement())
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     Int
  user       Student  @relation(fields: [userId], references: [id])
  action     String
  info       String
  priority   Priority
  createdAt  DateTime @default(now())
}

model Domain {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  ActivityDomain ActivityDomain[]
}

model ActivityDomain {
  id         Int      @id @default(autoincrement())
  activityId Int
  domainId   Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  domain     Domain   @relation(fields: [domainId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([activityId, domainId])
}

model Group {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  code       String     @unique
  activities Activity[]
  createdAt  DateTime   @default(now())
  students   Student[]
}

model Student {
  id        Int     @id @default(autoincrement())
  studentid String  @unique
  name      String
  email     String  @unique
  code      String? @unique
  groupid   Int
  group     Group   @relation(fields: [groupid], references: [id], onDelete: Cascade)
  logs      Log[] 
  activities Activity[]
}

model Token {
  id    Int    @id @default(autoincrement())
  token String @unique
  email String
}

enum Role {
  ADMIN
  USER
  DEV
}

enum Priority {
  BAIXA
  MEDIA
  ALTA
}
